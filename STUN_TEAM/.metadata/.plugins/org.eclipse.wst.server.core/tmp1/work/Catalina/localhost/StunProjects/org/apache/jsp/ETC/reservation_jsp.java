/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-07-25 08:59:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ETC;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class reservation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("	<title>다음 지도 API</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://code.jquery.com/ui/1.8.18/themes/base/jquery-ui.css\" type=\"text/css\" />  \r\n");
      out.write("<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>  \r\n");
      out.write("<script src=\"http://code.jquery.com/ui/1.8.18/jquery-ui.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    $(document).ready(function () {\r\n");
      out.write("            $.datepicker.setDefaults($.datepicker.regional['ko']); \r\n");
      out.write("            $( \"#startDate\" ).datepicker({\r\n");
      out.write("                 changeMonth: true, \r\n");
      out.write("                 changeYear: true,\r\n");
      out.write("                 nextText: '다음 달',\r\n");
      out.write("                 prevText: '이전 달', \r\n");
      out.write("                 dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],\r\n");
      out.write("                 dayNamesMin: ['일', '월', '화', '수', '목', '금', '토'], \r\n");
      out.write("                 monthNamesShort: ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'],\r\n");
      out.write("                 monthNames: ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'],\r\n");
      out.write("                 dateFormat: \"yymmdd\",\r\n");
      out.write("                 maxDate: 0,                       // 선택할수있는 최소날짜, ( 0 : 오늘 이후 날짜 선택 불가)\r\n");
      out.write("                 onClose: function( selectedDate ) {    \r\n");
      out.write("                      //시작일(startDate) datepicker가 닫힐때\r\n");
      out.write("                      //종료일(endDate)의 선택할수있는 최소 날짜(minDate)를 선택한 시작일로 지정\r\n");
      out.write("                     $(\"#endDate\").datepicker( \"option\", \"minDate\", selectedDate );\r\n");
      out.write("                 }    \r\n");
      out.write(" \r\n");
      out.write("            });\r\n");
      out.write("            $( \"#endDate\" ).datepicker({\r\n");
      out.write("                 changeMonth: true, \r\n");
      out.write("                 changeYear: true,\r\n");
      out.write("                 nextText: '다음 달',\r\n");
      out.write("                 prevText: '이전 달', \r\n");
      out.write("                 dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],\r\n");
      out.write("                 dayNamesMin: ['일', '월', '화', '수', '목', '금', '토'], \r\n");
      out.write("                 monthNamesShort: ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'],\r\n");
      out.write("                 monthNames: ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'],\r\n");
      out.write("                 dateFormat: \"yymmdd\",\r\n");
      out.write("                 maxDate: 0,                       // 선택할수있는 최대날짜, ( 0 : 오늘 이후 날짜 선택 불가)\r\n");
      out.write("                 onClose: function( selectedDate ) {    \r\n");
      out.write("                     // 종료일(endDate) datepicker가 닫힐때\r\n");
      out.write("                     // 시작일(startDate)의 선택할수있는 최대 날짜(maxDate)를 선택한 시작일로 지정\r\n");
      out.write("                     $(\"#startDate\").datepicker( \"option\", \"maxDate\", selectedDate );\r\n");
      out.write("                 } \r\n");
      out.write(" \r\n");
      out.write("            });    \r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<form action=\"reservationVO.jsp\" method=\"post\">\r\n");
      out.write("가게명: \r\n");
String title =request.getParameter("title");
out.println(title); 
      out.write("<br>\r\n");
      out.write("예약자명: 	    <input type = \"text\" name = \"reservation_name\"><br>\r\n");
      out.write("예약자 연락처: 	<input type = \"text\" name = \"reservation_tel\"><br>\r\n");
      out.write("인원수: <select name = \"reservation_number\">\r\n");
      out.write("<option value = \"1\">1명</option>\r\n");
      out.write("<option value = \"2\">2명</option>\r\n");
      out.write("<option value = \"3\">3명</option>\r\n");
      out.write("<option value = \"4\">4명</option>\r\n");
      out.write("<option value = \"5\">5명</option>\r\n");
      out.write("<option value = \"6\">6명</option>\r\n");
      out.write("<option value = \"7\">7명</option>\r\n");
      out.write("</select>\r\n");
      out.write("<br>\r\n");
      out.write("예약날짜: <input type=\"text\" id=\"startDate\" name=reservation_date>\r\n");
      out.write("<input type =\"hidden\" name=\"title\" value=");
      out.print(title );
      out.write(">\r\n");
      out.write("<input type = \"submit\" value = \"제출\"><br>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
